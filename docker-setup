#!/bin/bash

postgresPassword=$(cat /dev/urandom | base64 | head -c 64)
encryptionKey=$(cat /dev/urandom | base64 | head -c 64)
utilsSecret=$(cat /dev/urandom | base64 | head -c 64)
publicIpAddress=$(dig +short myip.opendns.com @resolver1.opendns.com)

echo "Hey, let's get started setting up Outline on-premise."
echo
echo "First up: Do you have a fully qualified domain pointed at this server?"
echo
echo "If you have a domain that points to your Outline server, the installation script can request a HTTPS certificate from LetsEncrypt automatically. If you do not provide one, a self-signed certificate will be used instead."
echo
echo "Now is a good time to point your fully qualified domain at this server's public address. Make sure the fully qualified domain resolves to the correct IP address before proceeding."
echo
echo "Please type your fully qualified domain below. Press enter to skip."
read -p "Enter it here: (default is your public ip address: ${publicIpAddress}) " hostname

# If no hostname was entered then default to the public ip address
if [ -z "$hostname" ]; then
  if [ -z "$publicIpAddress" ]; then
    echo "IP address could not be determined and a hostname was not provided, sorry we have to exit."
    exit 1
  fi
  hostname=$publicIpAddress
fi

# If an env file exists then back it up in case they accidentally reran this
# script, and then create a new blank file
if [ -f ./docker.env ]; then
  mv docker.env docker.env.$(date +"%Y-%m-%d_%H-%M-%S")
fi
touch docker.env

echo '## Set node environment to production' >> docker.env
echo 'NODE_ENV=production' >> docker.env
echo '' >> docker.env

echo '## Encryption key for passwords etc in the database' >> docker.env
echo "SECRET_KEY=${encryptionKey}" >> docker.env
echo '' >> docker.env
echo '## Access key for admin utilities over API' >> docker.env
echo "UTILS_SECRET=${utilsSecret}" >> docker.env
echo '' >> docker.env

echo '## Storage credentials' >> docker.env
echo 'DATABASE_URL=postgres://user:${postgresPassword}@postgres:5432/outline' >> docker.env
echo '' >> docker.env
echo 'REDIS_URL=redis://localhost:6479' >> docker.env
echo '' >> docker.env

echo '## Nginx server' >> docker.env
if [ "$hostname" == "$publicIpAddress" ]; then
  echo "STAGE=local" >> docker.env
  echo "# Change '${hostname}' to wiki.yourcompany.com to set up SSL" >> docker.env
else
  echo "# Change stage=local to use a self-signed SSL certificate" >> docker.env
  echo "STAGE=production" >> docker.env
fi
echo "# The fully qualified hostname in the following two variables must match" >> docker.env
echo "DOMAINS=${hostname} -> http://outline:3000" >> docker.env
echo "URL=${hostname}" >> docker.env
echo '' >> docker.env

echo "# Third party signin credentials, at least one of EITHER Google OR Slack is" >> docker.env
echo "# required for a working installation or you'll have no sign-in options." >> docker.env
echo "" >> docker.env
echo "# To configure Slack auth, you'll need to create an Application at" >> docker.env
echo "# => https://api.slack.com/apps" >> docker.env
echo '#' >> docker.env
echo '# When configuring the Client ID, add a redirect URL under "OAuth & Permissions":' >> docker.env
echo "# https://<URL>/auth/slack.callback" >> docker.env
echo "SLACK_KEY=get_a_key_from_slack" >> docker.env
echo "SLACK_SECRET=get_the_secret_of_above_key" >> docker.env
echo '' >> docker.env
echo "# To configure Google auth, you'll need to create an OAuth Client ID at" >> docker.env
echo "# => https://console.cloud.google.com/apis/credentials" >> docker.env
echo '#' >> docker.env
echo "# When configuring the Client ID, add an Authorized redirect URI:" >> docker.env
echo "# https://<URL>/auth/google.callback" >> docker.env
echo "GOOGLE_CLIENT_ID=" >> docker.env
echo "GOOGLE_CLIENT_SECRET=" >> docker.env
echo '' >> docker.env

echo "ENABLE_UPDATES=true" >> docker.env

echo "All done, to setup Google or Slack authentication take a look in docker.env"